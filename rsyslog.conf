#https://selivan.github.io/2017/02/07/rsyslog-log-forward-save-filename-handle-multi-line-failover.html#message-processing
#https://www.rsyslog.com/tag/ruleset/
#https://www.rsyslog.com/doc/v8-stable/concepts/multi_ruleset.html
#https://stackoverflow.com/questions/49526070/rsyslog-conf-file-stopped-receiving-logs
#https://www.rsyslog.com/doc/v8-stable/configuration/modules/imjournal.html#workaroundjournalbug
#https://unix.stackexchange.com/questions/196877/rsyslog-logger-message-duplicated
#https://gist.github.com/marcbachmann/00aca56839d9ba886fce1faf10faa355
#https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/s1-interaction_of_rsyslog_and_journal
#https://github.com/rsyslog/rsyslog/issues/85
#https://www.loggly.com/docs/scrub-data-rsyslog/


#  /etc/rsyslog.conf	Configuration file for rsyslog.
#
#			For more information see
#			/usr/share/doc/rsyslog-doc/html/rsyslog_conf.html


#################
#### MODULES ####
#################

module(load="imuxsock") # provides support for local system logging
#module(load="imklog")   # provides kernel logging support
#module(load="immark")  # provides --MARK-- message capability
module(load="imjournal")

#input(type="imuxsock" ruleset="r1")
#input(type="imjournal" ruleset="r2")


# provides UDP syslog reception
#module(load="imudp")
#input(type="imudp" port="514")

# provides TCP syslog reception
#module(load="imtcp")
#input(type="imtcp" port="514")

#$OmitLocalLogging on


###########################
#### GLOBAL DIRECTIVES ####
###########################

#
# Use traditional timestamp format.
# To enable high precision timestamps, comment out the following line.
#
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

#
# Set the default permissions for all log files.
#
$FileOwner root
$FileGroup adm
$FileCreateMode 0640
$DirCreateMode 0755
$Umask 0022

#
# Where to place spool and state files
#
$WorkDirectory /var/spool/rsyslog

#
# Include all config files in /etc/rsyslog.d/
#
$IncludeConfig /etc/rsyslog.d/*.conf


###############
#### RULES ####
###############

#
# First some standard log files.  Log by facility.
#



#module(load="mmjsonparse") #load mmjsonparse module for structured logs

#template(name="CEETemplate" type="string" option.casesensitive="on" string="XXX time=%TIMESTAMP% host=%HOSTNAME% tag=%syslogtag% EXE=%$!_EXE%  AUDIT=%$!_AUDIT_LOGINUID% TRANSPORT=%$!_TRANSPORT% machine=%$!_MACHINE_ID%   @cee: %$!all-json%\n" ) #template for messages

template(name="CRSYSLOG_SyslogProtocol23Format" type="string" option.casesensitive="on" string="%parsesuccess% <%PRI%>1 %TIMESTAMP:::date-rfc3339% %HOSTNAME% %APP-NAME% COMM=%$!_COMM% TRANSPORT=%!_TRANSPORT% %PROCID% MSG=%MSGID% %STRUCTURED-DATA% ??? %msg% %$!all-json% %$!%\n")



#"_COMM": "systemd",
#"_TRANSPORT": "journal", 


#action(type="mmjsonparse" cookie="" userawmsg="on")
#if $parsesuccess == "OK" then {




ruleset(name="r2"){
action(type="omfile" file="/var/log/ceelog_r1" template="CRSYSLOG_SyslogProtocol23Format")
}

ruleset(name="r1"){
   action(type="omfile" file="/var/log/ceelog_r2" template="RSYSLOG_SyslogProtocol23Format")
}



auth,authpriv.*			/var/log/auth.log
*.*;auth,authpriv.none		-/var/log/syslog
#cron.*				/var/log/cron.log
daemon.*			-/var/log/daemon.log
kern.*				-/var/log/kern.log
lpr.*				-/var/log/lpr.log
mail.*				-/var/log/mail.log
user.*				-/var/log/user.log

#
# Logging for the mail system.  Split it up so that
# it is easy to write scripts to parse these files.
#
mail.info			-/var/log/mail.info
mail.warn			-/var/log/mail.warn
mail.err			/var/log/mail.err

#
# Some "catch-all" log files.
#
*.=debug;\
	auth,authpriv.none;\
	news.none;mail.none	-/var/log/debug
*.=info;*.=notice;*.=warn;\
	auth,authpriv.none;\
	cron,daemon.none;\
	mail,news.none		-/var/log/messages

#
# Emergencies are sent to everybody logged in.
#
*.emerg				:omusrmsg:*
